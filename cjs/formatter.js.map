{"version":3,"sources":["../src/formatter.mjs"],"names":["objectToRecord","object","strict","TypeError","keys","Object","fields","i","len","length","label","value","SyntaxError","join","baseFormat","data","isArray","Array","records","push","format","formatStrict"],"mappings":";;;;;;;;AAIA;;AAJA;;;;AAMA;;;;;;;;;AASA,SAASA,cAAT,CAAwBC,MAAxB,EAAgCC,MAAhC,EAAwC;AACtC,MAAID,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,QAAzC,EAAmD;AACjD,UAAM,IAAIE,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,MAAZ,CAAb;AACA,QAAMK,MAAM,GAAG,EAAf;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGJ,IAAI,CAACK,MAA3B,EAAmCF,CAAC,GAAGC,GAAvC,EAA4C,EAAED,CAA9C,EAAiD;AAC/C,UAAMG,KAAK,GAAGN,IAAI,CAACG,CAAD,CAAlB;AACA,UAAMI,KAAK,GAAGV,MAAM,CAACG,IAAI,CAACG,CAAD,CAAL,CAApB;;AAEA,QAAIL,MAAM,IAAI,CAAC,6BAAaQ,KAAb,CAAf,EAAoC;AAClC,YAAM,IAAIE,WAAJ,CAAiB,mCAAkCF,KAAM,GAAzD,CAAN;AACD;;AAED,QAAIR,MAAM,IAAI,CAAC,6BAAaS,KAAb,CAAf,EAAoC;AAClC,YAAM,IAAIC,WAAJ,CAAiB,mCAAkCD,KAAM,GAAzD,CAAN;AACD;;AAEDL,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYG,KAAK,GAAG,GAAR,GAAcC,KAA1B;AACD;;AAED,SAAOL,MAAM,CAACO,IAAP,CAAY,IAAZ,CAAP;AACD;AAED;;;;;;;;;;;AASA,SAASC,UAAT,CAAoBC,IAApB,EAA0Bb,MAA1B,EAAkC;AAChC,QAAMc,OAAO,GAAGC,KAAK,CAACD,OAAN,CAAcD,IAAd,CAAhB;;AAEA,MAAI,CAACC,OAAD,KAAaD,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,QAA9C,CAAJ,EAA6D;AAC3D,UAAM,IAAIZ,SAAJ,CAAc,iCAAd,CAAN;AACD;;AAED,QAAMe,OAAO,GAAG,EAAhB;;AAEA,MAAIF,OAAJ,EAAa;AACX,SAAK,IAAIT,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGO,IAAI,CAACN,MAA3B,EAAmCF,CAAC,GAAGC,GAAvC,EAA4C,EAAED,CAA9C,EAAiD;AAC/CW,MAAAA,OAAO,CAACX,CAAD,CAAP,GAAaP,cAAc,CAACe,IAAI,CAACR,CAAD,CAAL,EAAUL,MAAV,CAA3B;AACD;AACF,GAJD,MAIO;AACLgB,IAAAA,OAAO,CAACC,IAAR,CAAanB,cAAc,CAACe,IAAD,EAAOb,MAAP,CAA3B;AACD;;AAED,SAAOgB,OAAO,CAACL,IAAR,CAAa,IAAb,CAAP;AACD;AAED;;;;;;;AAKO,SAASO,MAAT,CAAgBL,IAAhB,EAAsB;AAC3B,SAAOD,UAAU,CAACC,IAAD,EAAO,KAAP,CAAjB;AACD;AAED;;;;;;;AAKO,SAASM,YAAT,CAAsBN,IAAtB,EAA4B;AACjC,SAAOD,UAAU,CAACC,IAAD,EAAO,IAAP,CAAjB;AACD","sourcesContent":["/**\n * @file LTSV formatter.\n */\n\nimport { isValidLabel, isValidValue } from './validator.mjs';\n\n/**\n * convert to record string from object.\n *\n * @private\n * @param {Object} object\n * @param {boolean} strict\n * @return {string}\n * @throws {TypeError}\n */\nfunction objectToRecord(object, strict) {\n  if (object === null || typeof object !== 'object') {\n    throw new TypeError('object must be an Object');\n  }\n\n  const keys = Object.keys(object);\n  const fields = [];\n\n  for (let i = 0, len = keys.length; i < len; ++i) {\n    const label = keys[i];\n    const value = object[keys[i]];\n\n    if (strict && !isValidLabel(label)) {\n      throw new SyntaxError(`unexpected character of label: \"${label}\"`);\n    }\n\n    if (strict && !isValidValue(value)) {\n      throw new SyntaxError(`unexpected character of value: \"${value}\"`);\n    }\n\n    fields[i] = label + ':' + value;\n  }\n\n  return fields.join('\\t');\n}\n\n/**\n * convert to LTSV string from object or array.\n *\n * @private\n * @param {Object|Object[]} data\n * @param {boolean} strict\n * @return {string}\n * @throws {TypeError}\n */\nfunction baseFormat(data, strict) {\n  const isArray = Array.isArray(data);\n\n  if (!isArray && (data === null || typeof data !== 'object')) {\n    throw new TypeError('data must be an Object or Array');\n  }\n\n  const records = [];\n\n  if (isArray) {\n    for (let i = 0, len = data.length; i < len; ++i) {\n      records[i] = objectToRecord(data[i], strict);\n    }\n  } else {\n    records.push(objectToRecord(data, strict));\n  }\n\n  return records.join('\\n');\n}\n\n/**\n * convert to LTSV string from object or array.\n *\n * @see baseFormat\n */\nexport function format(data) {\n  return baseFormat(data, false);\n}\n\n/**\n * convert to LTSV string from object or array.\n *\n * @see baseFormat\n */\nexport function formatStrict(data) {\n  return baseFormat(data, true);\n}\n"],"file":"formatter.js"}