{"version":3,"file":"ltsv.js","sources":["../src/validator.mjs","../src/formatter.mjs","../src/parser.mjs","../index.mjs"],"sourcesContent":["/**\n * @file LTSV validator.\n */\n\n/**\n * validate label.\n *\n * @param {string} label\n * @return {boolean}\n */\nexport function isValidLabel(label) {\n  return /^[0-9A-Za-z_.-]+$/.test(label);\n}\n\n/**\n * validate for value.\n *\n * @param {string} value\n * @return {boolean}\n */\nexport function isValidValue(value) {\n  // eslint-disable-next-line no-control-regex\n  return /^[\\x01-\\x08\\x0B\\x0C\\x0E-\\xFF]*$/.test(value);\n}\n","/**\n * @file LTSV formatter.\n */\n\nimport { isValidLabel, isValidValue } from './validator.mjs';\n\n/**\n * convert to record string from object.\n *\n * @private\n * @param {Object} object\n * @param {boolean} strict\n * @return {string}\n * @throws {TypeError}\n */\nfunction objectToRecord(object, strict) {\n  if (object === null || typeof object !== 'object') {\n    throw new TypeError('object must be an Object');\n  }\n\n  const keys = Object.keys(object);\n  const fields = [];\n\n  for (let i = 0, len = keys.length; i < len; ++i) {\n    const label = keys[i];\n    const value = object[keys[i]];\n\n    if (strict && !isValidLabel(label)) {\n      throw new SyntaxError(`unexpected character of label: \"${label}\"`);\n    }\n\n    if (strict && !isValidValue(value)) {\n      throw new SyntaxError(`unexpected character of value: \"${value}\"`);\n    }\n\n    fields[i] = label + ':' + value;\n  }\n\n  return fields.join('\\t');\n}\n\n/**\n * convert to LTSV string from object or array.\n *\n * @private\n * @param {Object|Object[]} data\n * @param {boolean} strict\n * @return {string}\n * @throws {TypeError}\n */\nfunction baseFormat(data, strict) {\n  const isArray = Array.isArray(data);\n\n  if (!isArray && (data === null || typeof data !== 'object')) {\n    throw new TypeError('data must be an Object or Array');\n  }\n\n  const records = [];\n\n  if (isArray) {\n    for (let i = 0, len = data.length; i < len; ++i) {\n      records[i] = objectToRecord(data[i], strict);\n    }\n  } else {\n    records.push(objectToRecord(data, strict));\n  }\n\n  return records.join('\\n');\n}\n\n/**\n * convert to LTSV string from object or array.\n *\n * @see baseFormat\n */\nexport function format(data) {\n  return baseFormat(data, false);\n}\n\n/**\n * convert to LTSV string from object or array.\n *\n * @see baseFormat\n */\nexport function formatStrict(data) {\n  return baseFormat(data, true);\n}\n","/**\n * @file LTSV parser.\n */\n\nimport { isValidLabel, isValidValue } from './validator.mjs';\n\n/**\n * split to label and value from field.\n *\n * @private\n * @param {string} chunk\n * @param {boolean} strict\n * @return {Object}\n * @throws {SyntaxError}\n */\nfunction splitField(chunk, strict) {\n  const field = String(chunk);\n  const index = field.indexOf(':');\n\n  if (index === -1) {\n    throw new SyntaxError(`field separator is not found: \"${field}\"`);\n  }\n\n  const label = field.slice(0, index);\n  const value = field.slice(index + 1);\n\n  if (strict && !isValidLabel(label)) {\n    throw new SyntaxError(`unexpected character of label: \"${label}\"`);\n  }\n\n  if (strict && !isValidValue(value)) {\n    throw new SyntaxError(`unexpected character of value: \"${value}\"`);\n  }\n\n  return {\n    label,\n    value\n  };\n}\n\n/**\n * parse LTSV text.\n *\n * @private\n * @param {string} text\n * @param {boolean} strict\n * @return {Object[]}\n */\nfunction baseParse(text, strict) {\n  const lines = String(text)\n    .replace(/(?:\\r?\\n)+$/, '')\n    .split(/\\r?\\n/);\n\n  const records = [];\n\n  for (let i = 0, len = lines.length; i < len; ++i) {\n    records[i] = baseParseLine(lines[i], strict);\n  }\n\n  return records;\n}\n\n/**\n * parse LTSV record.\n *\n * @private\n * @param {string} line\n * @param {boolean} strict\n * @return {Object}\n */\nfunction baseParseLine(line, strict) {\n  const fields = String(line)\n    .replace(/(?:\\r?\\n)+$/, '')\n    .split('\\t');\n\n  const record = {};\n\n  for (let i = 0, len = fields.length; i < len; ++i) {\n    const { label, value } = splitField(fields[i], strict);\n\n    record[label] = value;\n  }\n\n  return record;\n}\n\n/**\n * parse LTSV text.\n *\n * @param {string} text\n * @return {string}\n */\nexport function parse(text) {\n  return baseParse(text, false);\n}\n\n/**\n * parse LTSV record.\n *\n * @param {string} line\n * @return {string}\n */\nexport function parseLine(line) {\n  return baseParseLine(line, false);\n}\n\n/**\n * parse LTSV text.\n *\n * @param {string} text\n * @return {string}\n */\nexport function parseStrict(text) {\n  return baseParse(text, true);\n}\n\n/**\n * parse LTSV record.\n *\n * @param {string} line\n * @return {string}\n */\nexport function parseLineStrict(line) {\n  return baseParseLine(line, true);\n}\n","/**\n * @file entrypoint.\n */\n\nexport * from './src/formatter.mjs';\nexport * from './src/parser.mjs';\nexport * from './src/stream.mjs';\nexport * from './src/validator.mjs';\n"],"names":["isValidLabel","label","test","isValidValue","value","objectToRecord","object","strict","TypeError","keys","Object","fields","i","len","length","SyntaxError","join","baseFormat","data","isArray","Array","records","push","format","formatStrict","splitField","chunk","field","String","index","indexOf","slice","baseParse","text","lines","replace","split","baseParseLine","line","record","parse","parseLine","parseStrict","parseLineStrict"],"mappings":"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"}